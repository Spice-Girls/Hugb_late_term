/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'steinn' at '10/25/15 5:54 PM' with Gradle 2.8
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/2.8/userguide/tutorial_java_projects.html
 */

// Apply the java plugin to add support for Java
apply plugin: 'java'
apply plugin: 'application'
apply plugin: "jacoco"
apply plugin: 'pmd'

mainClassName = "spice.tic_tac_toe.Controller"

// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'jcenter' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
        mavenCentral()
}

jacoco {
    toolVersion = "0.7.1.201405082137"
}

jacocoTestReport {
    reports {
        xml.enabled false
            csv.enabled false
            html.enabled true
            html.destination "build/jacoco/reports/jacocoHtml"
    }
    description 'Runs jacoco for code coverage'
}
sourceSets {
    main.java.srcDir "src/main"
    test.java.srcDir "src/test"
    selenium.java.srcDir "src/seleniumTest"
    seleniumXvfb.java.srcDir "src/seleniumTest"
}

// In this section you declare the dependencies for your production and test code
dependencies {
    // The production code uses the SLF4J logging API at compile time
    compile 'org.slf4j:slf4j-api:1.7.12'
        compile 'org.apache.commons:commons-lang3:3.3.2'
        // Declare the dependency for your favourite test framework you want to use in your tests.
        // TestNG is also supported by the Gradle Test task. Just change the
        // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
        // 'test.useTestNG()' to your build script.
        testCompile 'junit:junit:4.12'
        compile 'com.sparkjava:spark-core:2.3'
            
        seleniumCompile 'junit:junit:4.12'
        seleniumCompile 'org.seleniumhq.selenium:selenium-java:2.48.2'
        seleniumCompile 'org.seleniumhq.selenium:selenium-server:2.48.2'
        seleniumCompile 'org.seleniumhq.selenium:selenium-firefox-driver:2.48.2'
        seleniumCompile 'org.seleniumhq.selenium:selenium-java:2.48.2'
        seleniumCompile 'org.seleniumhq.selenium:selenium-server:2.48.2'
        seleniumCompile 'org.seleniumhq.selenium:selenium-firefox-driver:2.48.2'

        seleniumXvfbCompile 'junit:junit:4.12'
        seleniumXvfbCompile 'org.seleniumhq.selenium:selenium-java:2.48.2'
        seleniumXvfbCompile 'org.seleniumhq.selenium:selenium-server:2.48.2'
        seleniumXvfbCompile 'org.seleniumhq.selenium:selenium-firefox-driver:2.48.2'
        seleniumXvfbCompile 'org.seleniumhq.selenium:selenium-java:2.48.2'
        seleniumXvfbCompile 'org.seleniumhq.selenium:selenium-server:2.48.2'
        seleniumXvfbCompile 'org.seleniumhq.selenium:selenium-firefox-driver:2.48.2'

}

jar {
    from configurations.compile.collect { zipTree it }
    manifest.attributes("Main-Class": "spice.tic_tac_toe.Controller")
}


task runMainJar(type:Exec, dependsOn: jar) {
    executable 'java'
        args '-jar', "$jar.archivePath"
        group 'Running jar files'
        description 'Runs the executable jar file output from the main class ttt'
}

task seleniumXvfb(type: Test, dependsOn: installDist) {
    testClassesDir = sourceSets.selenium.output.classesDir
    classpath = sourceSets.selenium.runtimeClasspath
    environment "DISPLAY", ":99"
    doFirst {
        'bin/xvfb start'.execute()
        'build/install/Hugb_late_term/bin/Hugb_late_term &'.execute()
    }
    doLast {
        'sh -e /etc/init.d/xvfb stop'.execute()
    }
}

task stage {
      dependsOn installDist
}

